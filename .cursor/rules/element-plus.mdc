---
description: 
globs: 
alwaysApply: true
---
 ```mdc
# Element Plus 组件使用规则

## Component Import Rules

### 按需导入
```typescript
// ✅ 正确示例
import { ElButton, ElInput } from 'element-plus'

// ❌ 错误示例
import ElementPlus from 'element-plus'
```

### 类型导入
```typescript
// ✅ 正确示例
import type { FormInstance, FormRules } from 'element-plus'

// ❌ 错误示例
import { FormInstance } from 'element-plus'
```

## Component Usage

### Form 组件
```vue
<template>
  <el-form
    ref="formRef"
    :model="form"
    :rules="rules"
    label-width="120px"
    @submit.prevent="handleSubmit"
  >
    <el-form-item label="用户名" prop="username">
      <el-input v-model="form.username" />
    </el-form-item>
    
    <el-form-item>
      <el-button type="primary" @click="submitForm(formRef)">
        提交
      </el-button>
    </el-form-item>
  </el-form>
</template>

<script setup lang="ts">
import { ref } from 'vue'
import type { FormInstance, FormRules } from 'element-plus'

const formRef = ref<FormInstance>()
const form = ref({
  username: ''
})

const rules: FormRules = {
  username: [
    { required: true, message: '请输入用户名', trigger: 'blur' },
    { min: 3, max: 20, message: '长度在 3 到 20 个字符', trigger: 'blur' }
  ]
}

const submitForm = async (formEl: FormInstance | undefined) => {
  if (!formEl) return
  await formEl.validate((valid, fields) => {
    if (valid) {
      console.log('submit!')
    }
  })
}
</script>
```

### Table 组件
```vue
<template>
  <el-table
    :data="tableData"
    :loading="loading"
    height="400"
    @selection-change="handleSelectionChange"
  >
    <el-table-column type="selection" width="55" />
    <el-table-column prop="date" label="日期" sortable />
    <el-table-column prop="name" label="姓名" />
    <el-table-column label="操作">
      <template #default="{ row }">
        <el-button type="primary" @click="handleEdit(row)">
          编辑
        </el-button>
      </template>
    </el-table-column>
  </el-table>
</template>
```

### Dialog 组件
```vue
<template>
  <el-dialog
    v-model="dialogVisible"
    title="编辑信息"
    width="500px"
    :before-close="handleClose"
  >
    <!-- Dialog content -->
    <template #footer>
      <span class="dialog-footer">
        <el-button @click="dialogVisible = false">取消</el-button>
        <el-button type="primary" @click="handleConfirm">
          确认
        </el-button>
      </span>
    </template>
  </el-dialog>
</template>
```

## Style Guidelines

### 主题定制
```scss
// styles/element/index.scss
@forward 'element-plus/theme-chalk/src/common/var.scss' with (
  $colors: (
    'primary': (
      'base': #409eff,
    ),
  ),
  $button: (
    'font-weight': 500
  )
);
```

### 组件样式覆盖
```scss
// ✅ 正确示例 - 使用 :deep() 选择器
.custom-form {
  :deep(.el-input) {
    width: 300px;
  }
}

// ❌ 错误示例 - 直接覆盖
.el-input {
  width: 300px;
}
```

## Best Practices

### 表单验证
- 使用 async-validator 规则
- 统一表单验证规则
- 使用 TypeScript 类型

### 表格优化
- 使用虚拟滚动
- 合理设置固定列
- 控制数据量

### 弹窗管理
- 使用 v-model 控制显示
- 实现 before-close 钩子
- 处理异步关闭

### 消息提示
- 使用 ElMessage 服务
- 统一消息样式
- 控制显示时长

## Common Patterns

### 表单提交
```typescript
const submitForm = async (formEl: FormInstance | undefined) => {
  if (!formEl) return
  
  try {
    await formEl.validate()
    loading.value = true
    await submitAPI(form.value)
    ElMessage.success('提交成功')
    dialogVisible.value = false
  } catch (error) {
    ElMessage.error('提交失败')
  } finally {
    loading.value = false
  }
}
```

### 表格数据加载
```typescript
const loadTableData = async (params: TableParams) => {
  try {
    loading.value = true
    const { data, total } = await getTableData(params)
    tableData.value = data
    pagination.value.total = total
  } catch (error) {
    ElMessage.error('加载失败')
  } finally {
    loading.value = false
  }
}
```

### 批量操作
```typescript
const handleBatchDelete = async (rows: TableRow[]) => {
  try {
    await ElMessageBox.confirm('确认删除选中项？', '提示', {
      type: 'warning'
    })
    await deleteAPI(rows.map(row => row.id))
    ElMessage.success('删除成功')
    await loadTableData(pagination.value)
  } catch (error) {
    if (error !== 'cancel') {
      ElMessage.error('删除失败')
    }
  }
}
```

## Performance Tips

### 大数据渲染
- 使用 el-table 的虚拟滚动
- 避免频繁更新表格数据
- 合理使用 v-show 和 v-if

### 表单优化
- 使用 debounce 处理输入
- 避免不必要的验证
- 合理使用异步验证

### 弹窗优化
- 使用 v-if 销毁内容
- 控制弹窗数量
- 处理内存泄漏

## Accessibility

### ARIA 属性
- 使用正确的 role
- 添加适当的 aria-label
- 确保键盘可访问

### 颜色对比度
- 遵循 WCAG 标准
- 使用主题变量
- 测试不同场景

## Internationalization

### 文本配置
- 使用 i18n 配置
- 支持多语言切换
- 处理日期格式

### RTL 支持
- 使用 RTL 属性
- 测试 RTL 布局
- 处理文字方向
```