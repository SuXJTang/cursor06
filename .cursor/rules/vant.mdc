---
description: 
globs: 
alwaysApply: true
---
 ```mdc
# Vant 组件使用规则

## Component Import Rules

### 按需导入
```typescript
// ✅ 正确示例
import { Button, Field } from 'vant'

// ❌ 错误示例
import Vant from 'vant'
```

### 类型导入
```typescript
// ✅ 正确示例
import type { FormInstance } from 'vant'

// ❌ 错误示例
import { FormInstance } from 'vant'
```

## Component Usage

### Form 组件
```vue
<template>
  <van-form @submit="onSubmit">
    <van-cell-group inset>
      <van-field
        v-model="username"
        name="username"
        label="用户名"
        placeholder="请输入用户名"
        :rules="[{ required: true, message: '请填写用户名' }]"
      />
      
      <van-field
        v-model="password"
        type="password"
        name="password"
        label="密码"
        placeholder="请输入密码"
        :rules="[{ required: true, message: '请填写密码' }]"
      />
    </van-cell-group>
    
    <div style="margin: 16px">
      <van-button round block type="primary" native-type="submit">
        提交
      </van-button>
    </div>
  </van-form>
</template>

<script setup lang="ts">
import { ref } from 'vue'
import type { FormInstance } from 'vant'

const username = ref('')
const password = ref('')

const onSubmit = (values: any) => {
  console.log('submit', values)
}
</script>
```

### List 组件
```vue
<template>
  <van-pull-refresh v-model="refreshing" @refresh="onRefresh">
    <van-list
      v-model:loading="loading"
      :finished="finished"
      finished-text="没有更多了"
      @load="onLoad"
    >
      <van-cell v-for="item in list" :key="item.id" :title="item.title" />
    </van-list>
  </van-pull-refresh>
</template>

<script setup lang="ts">
import { ref } from 'vue'

const list = ref([])
const loading = ref(false)
const finished = ref(false)
const refreshing = ref(false)

const onLoad = async () => {
  // 加载更多数据
}

const onRefresh = async () => {
  // 刷新数据
}
</script>
```

### Dialog 组件
```vue
<template>
  <van-dialog
    v-model:show="show"
    title="标题"
    show-cancel-button
    @confirm="onConfirm"
    @cancel="onCancel"
  >
    <div class="content">
      <!-- Dialog content -->
    </div>
  </van-dialog>
</template>

<script setup lang="ts">
import { ref } from 'vue'
import { showDialog } from 'vant'

// 使用组件方式
const show = ref(false)

// 使用函数调用方式
const showConfirmDialog = () => {
  showDialog({
    title: '标题',
    message: '弹窗内容',
    showCancelButton: true,
  })
    .then(() => {
      // on confirm
    })
    .catch(() => {
      // on cancel
    })
}
</script>
```

## Style Guidelines

### 主题定制
```scss
// styles/vant/index.scss
:root {
  --van-primary-color: #1989fa;
  --van-success-color: #07c160;
  --van-danger-color: #ee0a24;
  --van-warning-color: #ff976a;
}
```

### 组件样式覆盖
```scss
// ✅ 正确示例 - 使用 CSS 变量
.custom-button {
  --van-button-primary-background-color: #1989fa;
}

// ❌ 错误示例 - 直接覆盖
.van-button {
  background-color: #1989fa;
}
```

## Best Practices

### 表单处理
- 使用 van-form 组件
- 统一表单验证规则
- 处理表单提交状态

### 列表优化
- 使用虚拟列表
- 实现下拉刷新
- 处理无限加载

### 弹窗使用
- 优先使用函数调用
- 处理异步操作
- 统一交互方式

### 消息提示
- 使用 Toast 服务
- 控制显示时间
- 统一提示样式

## Common Patterns

### 表单提交
```typescript
const onSubmit = async (values: any) => {
  try {
    showLoadingToast({
      message: '提交中...',
      forbidClick: true,
    })
    
    await submitAPI(values)
    showSuccessToast('提交成功')
  } catch (error) {
    showFailToast('提交失败')
  }
}
```

### 列表加载
```typescript
const onLoad = async () => {
  try {
    const { data, finished: isFinished } = await loadMore(page.value)
    list.value.push(...data)
    finished.value = isFinished
  } catch (error) {
    showFailToast('加载失败')
  } finally {
    loading.value = false
  }
}
```

### 确认操作
```typescript
const handleDelete = async (id: string) => {
  try {
    await showConfirmDialog({
      title: '提示',
      message: '确认删除？',
    })
    
    await deleteAPI(id)
    showSuccessToast('删除成功')
  } catch (error) {
    if (error !== 'cancel') {
      showFailToast('删除失败')
    }
  }
}
```

## Performance Tips

### 列表优化
- 使用虚拟列表组件
- 图片懒加载
- 合理使用骨架屏

### 表单优化
- 使用 debounce 处理输入
- 合理使用异步验证
- 避免不必要的重渲染

### 弹窗优化
- 及时销毁弹窗内容
- 避免弹窗嵌套
- 控制同时展示数量

## Accessibility

### 无障碍支持
- 使用语义化标签
- 添加 aria 属性
- 支持键盘操作

### 反馈优化
- 添加加载状态
- 提供操作反馈
- 错误信息展示

## Mobile Optimization

### 触摸优化
- 合理的点击区域
- 添加触摸反馈
- 避免误触

### 性能优化
- 控制重绘重排
- 使用 CSS 动画
- 延迟非关键渲染

## Responsive Design

### 适配方案
- 使用 rem 布局
- 响应式栅格
- 断点处理

### 横屏适配
- 监听屏幕旋转
- 调整布局结构
- 优化用户体验
```