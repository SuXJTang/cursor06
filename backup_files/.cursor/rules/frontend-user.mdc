# 前端用户端（C端）开发规则

## 技术栈规范

### 核心框架
- Vue3 ^3.4.0
- TypeScript ^5.2.0
- Vite ^5.0.0
- Vant ^4.8.0（移动端UI框架）
- Pinia ^2.1.0（状态管理）
- Vue Router ^4.2.0（路由）
- Axios ^1.6.0（HTTP客户端）

### 移动端适配
```typescript
// vite.config.ts
import { defineConfig } from 'vite'
import vue from '@vitejs/plugin-vue'
import { VantResolver } from 'unplugin-vue-components/resolvers'
import Components from 'unplugin-vue-components/vite'
import postcsspxtoviewport from 'postcss-px-to-viewport-8-plugin'

export default defineConfig({
  plugins: [
    vue(),
    Components({
      resolvers: [VantResolver()]
    })
  ],
  css: {
    postcss: {
      plugins: [
        postcsspxtoviewport({
          viewportWidth: 375,
          unitPrecision: 3,
          viewportUnit: 'vw',
          selectorBlackList: ['.ignore'],
          minPixelValue: 1,
          mediaQuery: false
        })
      ]
    }
  }
})
```

## 项目结构

```
src/
├── api/                    # API接口
│   ├── user.ts            # 用户相关接口
│   ├── resume.ts          # 简历相关接口
│   ├── job.ts             # 职位相关接口
│   └── assessment.ts      # 测评相关接口
├── assets/                # 静态资源
│   ├── images/           # 图片资源
│   ├── icons/            # 图标资源
│   └── styles/           # 全局样式
├── components/           # 组件
│   ├── common/          # 通用组件
│   │   ├── NavBar.vue
│   │   └── TabBar.vue
│   └── business/        # 业务组件
│       ├── resume/      # 简历相关组件
│       ├── job/         # 职位相关组件
│       └── user/        # 用户相关组件
├── composables/         # 组合式函数
│   ├── useAuth.ts      # 认证相关
│   ├── useResume.ts    # 简历相关
│   └── useJob.ts       # 职位相关
├── router/             # 路由配置
│   ├── index.ts       # 路由入口
│   └── guards.ts      # 路由守卫
├── stores/            # 状态管理
│   ├── user.ts       # 用户状态
│   ├── resume.ts     # 简历状态
│   └── job.ts        # 职位状态
├── styles/           # 样式文件
│   ├── variables.scss  # 变量
│   ├── mixins.scss    # 混入
│   └── reset.scss     # 重置样式
├── types/            # 类型定义
│   ├── user.types.ts
│   ├── resume.types.ts
│   └── job.types.ts
├── utils/           # 工具函数
│   ├── request.ts   # 请求封装
│   ├── storage.ts   # 存储工具
│   └── validate.ts  # 验证工具
└── views/          # 页面组件
    ├── auth/       # 认证相关页面
    ├── home/       # 首页相关
    ├── resume/     # 简历相关页面
    ├── job/        # 职位相关页面
    └── user/       # 用户中心页面
```

## 组件开发规范

### 基础组件示例
```vue
<!-- components/common/NavBar.vue -->
<template>
  <van-nav-bar
    :title="title"
    :left-text="leftText"
    :left-arrow="showBack"
    :right-text="rightText"
    @click-left="onClickLeft"
    @click-right="onClickRight"
  />
</template>

<script setup lang="ts">
interface Props {
  title: string
  leftText?: string
  rightText?: string
  showBack?: boolean
}

const props = withDefaults(defineProps<Props>(), {
  leftText: '',
  rightText: '',
  showBack: true
})

const emit = defineEmits<{
  (e: 'click-left'): void
  (e: 'click-right'): void
}>()

const onClickLeft = () => {
  if (props.showBack) {
    history.back()
  }
  emit('click-left')
}

const onClickRight = () => {
  emit('click-right')
}
</script>

<style scoped lang="scss">
// 自定义样式
</style>
```

### 业务组件示例
```vue
<!-- components/business/job/JobCard.vue -->
<template>
  <van-card
    :title="job.title"
    :desc="job.company"
    :thumb="job.logo"
  >
    <template #tags>
      <van-tag plain type="primary" v-for="tag in job.tags" :key="tag">
        {{ tag }}
      </van-tag>
    </template>
    <template #footer>
      <van-button size="small" type="primary" @click="handleApply">
        立即申请
      </van-button>
    </template>
  </van-card>
</template>

<script setup lang="ts">
import type { Job } from '@/types/job.types'
import { useJobStore } from '@/stores/job'
import { showToast } from 'vant'

interface Props {
  job: Job
}

defineProps<Props>()

const jobStore = useJobStore()

const handleApply = async () => {
  try {
    await jobStore.applyJob(props.job.id)
    showToast('申请成功')
  } catch (error) {
    showToast('申请失败')
  }
}
</script>
```

## 页面开发规范

### 页面组件示例
```vue
<!-- views/job/JobList.vue -->
<template>
  <div class="job-list">
    <NavBar title="职位列表" />
    
    <van-search
      v-model="keyword"
      placeholder="搜索职位"
      @search="onSearch"
    />
    
    <van-pull-refresh v-model="refreshing" @refresh="onRefresh">
      <van-list
        v-model:loading="loading"
        :finished="finished"
        finished-text="没有更多了"
        @load="onLoad"
      >
        <JobCard
          v-for="job in jobs"
          :key="job.id"
          :job="job"
          @click="handleJobClick(job)"
        />
      </van-list>
    </van-pull-refresh>
  </div>
</template>

<script setup lang="ts">
import { ref } from 'vue'
import { useJobStore } from '@/stores/job'
import type { Job } from '@/types/job.types'
import NavBar from '@/components/common/NavBar.vue'
import JobCard from '@/components/business/job/JobCard.vue'

const jobStore = useJobStore()
const keyword = ref('')
const page = ref(1)
const loading = ref(false)
const finished = ref(false)
const refreshing = ref(false)
const jobs = ref<Job[]>([])

const onSearch = async () => {
  page.value = 1
  finished.value = false
  jobs.value = []
  await onLoad()
}

const onLoad = async () => {
  try {
    loading.value = true
    const { data, hasMore } = await jobStore.getJobs({
      page: page.value,
      keyword: keyword.value
    })
    
    if (page.value === 1) {
      jobs.value = data
    } else {
      jobs.value.push(...data)
    }
    
    finished.value = !hasMore
    page.value++
  } catch (error) {
    showToast('加载失败')
  } finally {
    loading.value = false
    refreshing.value = false
  }
}

const onRefresh = async () => {
  page.value = 1
  finished.value = false
  await onLoad()
}

const handleJobClick = (job: Job) => {
  router.push(`/job/${job.id}`)
}
</script>

<style scoped lang="scss">
.job-list {
  min-height: 100vh;
  background-color: #f7f8fa;
  
  :deep(.van-card) {
    margin-bottom: 8px;
  }
}
</style>
```

## 状态管理规范

### Store示例
```typescript
// stores/job.ts
import { defineStore } from 'pinia'
import type { Job, JobQuery } from '@/types/job.types'
import { getJobList, applyForJob } from '@/api/job'

export const useJobStore = defineStore('job', () => {
  // 状态
  const jobs = ref<Job[]>([])
  const loading = ref(false)
  const currentJob = ref<Job | null>(null)
  
  // Getters
  const recommendedJobs = computed(() => 
    jobs.value.filter(job => job.isRecommended)
  )
  
  // Actions
  const getJobs = async (query: JobQuery) => {
    loading.value = true
    try {
      const { data, hasMore } = await getJobList(query)
      return { data, hasMore }
    } finally {
      loading.value = false
    }
  }
  
  const applyJob = async (jobId: string) => {
    await applyForJob(jobId)
  }
  
  return {
    jobs,
    loading,
    currentJob,
    recommendedJobs,
    getJobs,
    applyJob
  }
})
```

## 路由配置规范

### 路由示例
```typescript
// router/index.ts
import { createRouter, createWebHistory } from 'vue-router'
import type { RouteRecordRaw } from 'vue-router'

const routes: RouteRecordRaw[] = [
  {
    path: '/',
    component: () => import('@/views/home/Index.vue'),
    meta: { keepAlive: true }
  },
  {
    path: '/job',
    children: [
      {
        path: '',
        component: () => import('@/views/job/JobList.vue'),
        meta: { keepAlive: true }
      },
      {
        path: ':id',
        component: () => import('@/views/job/JobDetail.vue')
      }
    ]
  },
  {
    path: '/resume',
    component: () => import('@/views/resume/Index.vue'),
    meta: { requiresAuth: true }
  },
  {
    path: '/user',
    component: () => import('@/views/user/Index.vue'),
    meta: { requiresAuth: true }
  }
]

const router = createRouter({
  history: createWebHistory(),
  routes
})

export default router
```

## API 请求规范

### 请求配置
```typescript
// utils/request.ts
import axios from 'axios'
import { showToast, showLoadingToast, closeToast } from 'vant'

const request = axios.create({
  baseURL: import.meta.env.VITE_API_BASE_URL,
  timeout: 10000
})

// 请求拦截器
request.interceptors.request.use(
  config => {
    if (config.showLoading) {
      showLoadingToast({
        message: '加载中...',
        forbidClick: true
      })
    }
    
    const token = localStorage.getItem('token')
    if (token) {
      config.headers.Authorization = `Bearer ${token}`
    }
    
    return config
  },
  error => {
    closeToast()
    return Promise.reject(error)
  }
)

// 响应拦截器
request.interceptors.response.use(
  response => {
    closeToast()
    return response.data
  },
  error => {
    closeToast()
    
    if (error.response) {
      switch (error.response.status) {
        case 401:
          // 处理未授权
          break
        case 403:
          // 处理禁止访问
          break
        case 404:
          // 处理未找到
          break
        case 500:
          // 处理服务器错误
          break
      }
    }
    
    showToast(error.message || '请求失败')
    return Promise.reject(error)
  }
)

export default request
```

## 样式规范

### 全局样式
```scss
// styles/variables.scss
:root {
  // 主题色
  --van-primary-color: #1989fa;
  --van-success-color: #07c160;
  --van-danger-color: #ee0a24;
  --van-warning-color: #ff976a;
  
  // 文字颜色
  --van-text-color: #323233;
  --van-text-color-2: #969799;
  --van-text-color-3: #c8c9cc;
  
  // 背景色
  --van-background: #f7f8fa;
  --van-background-2: #fff;
  
  // 间距
  --van-padding-base: 4px;
  --van-padding-xs: 8px;
  --van-padding-sm: 12px;
  --van-padding-md: 16px;
  --van-padding-lg: 24px;
}

// styles/mixins.scss
@mixin flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

@mixin ellipsis {
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}

@mixin multi-ellipsis($lines) {
  display: -webkit-box;
  overflow: hidden;
  text-overflow: ellipsis;
  -webkit-line-clamp: $lines;
  -webkit-box-orient: vertical;
}
```

## 性能优化规范

### 图片优化
```typescript
// components/common/LazyImage.vue
<template>
  <van-image
    :src="props.src"
    :alt="props.alt"
    loading="lazy"
    loading-placeholder="加载中..."
    error-placeholder="加载失败"
  />
</template>

// 使用 webp 格式
<picture>
  <source type="image/webp" srcset="image.webp">
  <img src="image.jpg" alt="图片">
</picture>
```

### 列表优化
```typescript
// 虚拟列表
import { List } from 'vant'

<van-list
  v-model:loading="loading"
  :finished="finished"
  finished-text="没有更多了"
  :immediate-check="false"
  @load="onLoad"
>
  <!-- 列表内容 -->
</van-list>
```

### 路由优化
```typescript
// 路由懒加载
const routes = [
  {
    path: '/job',
    component: () => import(/* webpackChunkName: "job" */ '@/views/job/Index.vue')
  }
]

// 预加载
const router = createRouter({
  routes,
  scrollBehavior: (to, from, savedPosition) => {
    if (savedPosition) {
      return savedPosition
    }
    return { top: 0 }
  }
})
```

## 测试规范

### 单元测试
```typescript
// components/__tests__/JobCard.spec.ts
import { mount } from '@vue/test-utils'
import JobCard from '../JobCard.vue'

describe('JobCard.vue', () => {
  it('renders job information correctly', () => {
    const job = {
      id: '1',
      title: '前端工程师',
      company: '某公司',
      tags: ['Vue3', 'TypeScript']
    }
    
    const wrapper = mount(JobCard, {
      props: { job }
    })
    
    expect(wrapper.text()).toContain(job.title)
    expect(wrapper.text()).toContain(job.company)
    expect(wrapper.findAll('.van-tag')).toHaveLength(job.tags.length)
  })
})
```

## 安全规范

### 数据安全
```typescript
// utils/storage.ts
import CryptoJS from 'crypto-js'

const SECRET_KEY = import.meta.env.VITE_STORAGE_KEY

export const storage = {
  set(key: string, value: any) {
    const encrypted = CryptoJS.AES.encrypt(
      JSON.stringify(value),
      SECRET_KEY
    ).toString()
    localStorage.setItem(key, encrypted)
  },
  
  get(key: string) {
    const encrypted = localStorage.getItem(key)
    if (!encrypted) return null
    
    const decrypted = CryptoJS.AES.decrypt(encrypted, SECRET_KEY)
    return JSON.parse(decrypted.toString(CryptoJS.enc.Utf8))
  }
}
```

## 错误处理规范

### 全局错误处理
```typescript
// main.ts
app.config.errorHandler = (err, instance, info) => {
  // 错误上报
  errorLogger.error({
    error: err,
    component: instance?.$options.name,
    info,
    url: window.location.href
  })
  
  // 用户提示
  showToast('系统出现错误，请稍后重试')
}
```

## 国际化规范

### i18n配置
```typescript
// locales/index.ts
import { createI18n } from 'vue-i18n'
import zh from './zh-CN'
import en from './en-US'

const i18n = createI18n({
  locale: 'zh-CN',
  fallbackLocale: 'en-US',
  messages: {
    'zh-CN': zh,
    'en-US': en
  }
})

export default i18n
``` 